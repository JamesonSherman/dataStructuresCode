

namespace main_savitch_7B
{

	template<typename Item>
	void sequence<Item>::start()
	{
		size_type it = 0;
		it = stack1.size();

		while (it > 0)
		{
			stack2.push(stack1.top());
			stack1.pop();
			--it;
		}
		if (!(stack2.empty()))
		{
			stack1.push(stack2.top());
			stack2.pop();
		}
	}

	template<typename Item>
	void sequence<Item>::advance()
	{
		size_type it = 0;
		it = stack1.size();
		if (stack2.empty())
		{
			while (it > 0)
			{
				stack2.push(stack1.top());
				stack1.pop();
				--it;
			}
		}
		else
		{
			stack1.push(stack2.top());
			stack2.pop();
		}
		
	}

	template<typename Item>
	void sequence<Item>::insert(const Item & entry)
	{
		if (is_item())
		{
			stack2.push(stack1.top());
			stack1.pop();
			stack1.push(entry);
		}
		else
			stack1.push(entry);
	}

	template<typename Item>
	void sequence<Item>::attach(const Item & entry)
	{
		if (!(is_item()) && !(stack2.empty()))
		{
			while (!stack2.empty())
			{
				stack1.push(stack2.top());
				stack2.pop();
			}
			stack1.push(entry);
		}
		else
			stack1.push(entry);

	}

	template<typename Item>
	void sequence<Item>::remove_current()
	{
		if (is_item())
		{
			stack1.pop();
		}
		if (!stack2.empty())
		{
			stack1.push(stack2.top());
			stack2.pop();
		}
		else
		{
			while (stack1.size() > 0)
			{
				stack2.push(stack1.top());
				stack1.pop();
			}
		}
	}

	template<typename Item>
	typename sequence<Item>::size_type sequence<Item>::size() const
	{
		return (stack1.size() + stack2.size());
	}

	template<typename Item>
	bool sequence<Item>::is_item() const
	{
		return !(stack1.empty());
	}

	template<typename Item>
	Item sequence<Item>::current() const
	{
		return stack1.top();
	}
}

/*
//////////////////////////////////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////                    Collaborators on this Assignment:                     \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////                                                                          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////              Micheal whitney - Implementation & Debugging                \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////              Kaitlyn Butler - Implementation & Debugging                 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////              Christopher Spragio - Help Debugging                        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////              Jeremiah Scott - Implementation                             \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
/////////////////////////////////////                                                                          \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////////////////////////////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
*/

